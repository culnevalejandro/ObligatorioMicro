.globl menu_tateti
	
	.data
	jugador_actual: .byte 0x0
	tablero_x: .space 2 # cada tablero de 9 bits
	tablero_o: .space 2
	tablero_general: .space 2
	str_turno_O: .asciiz "TURNO DE: O "
	str_turno_X: .asciiz "TURNO DE: X "
	str_termino: .asciiz "GANADOR: "
	tablero_bitmap: .byte 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF
	o_invertido_bitmap: .byte 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0xCF, 0xCF, 0xCF, 0xCF, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF3, 0xF3, 0xF3, 0xF3, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF
	o_bitmap: .byte 0xFF, 0x01, 0x01, 0x01, 0xF1, 0xF1, 0x31, 0x31, 0x31, 0x31, 0xF1, 0xF1, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x8F, 0x8F, 0x8C, 0x8C, 0x8C, 0x8C, 0x8F, 0x8F, 0x80, 0x80, 0x80, 0xFF
	x_invertido_bitmap: .byte 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x8F, 0x1F, 0x3F, 0x3F, 0x1F, 0x8F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF,0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xF1, 0xF8, 0xFC, 0xFC, 0xF8, 0xF1, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF
	x_bitmap: .byte 0xFF, 0x01, 0x01, 0x01, 0x31, 0x71, 0xE1, 0xC1, 0xC1, 0xE1, 0x71, 0x31, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x8C, 0x8E, 0x87, 0x83, 0x83, 0x87, 0x8E, 0x8C, 0x80, 0x80, 0x80, 0xFF
	str_instrucciones: .asciiz "INSTRUCCIONES: "
	str_comenzar: .asciiz "COMENZAR - (D) "
	str_linea_negra: .space 128
	str_no_disponible: .asciiz "JUGADA NO VALIDA"
	str_letra: .asciiz "POSICIONE SU FICHA PRESIONANDO EL NUMERO DE CASILLERO CORRESPONDIENTE, PARA CONFIRMAR PRESIONE (D)"
	hay_jugada: .byte 0x00
	cuadrado_negro: .byte 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF
	str_gano_X: .asciiz "GANO: X !!!"
	str_gano_O: .asciiz "GANO: O !!!"
	str_volver_a_jugar: .asciiz "REVANCHA? (D)"
	str_nadie_gano: .asciiz "EMPATE...POR AHORA"
.text
	
menu_tateti:
	
	addi $sp, $sp,-12
	
	sw $ra, ($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	
	# Mostrar instrucciones	
	jal		black_screen
	li		$a0, 0x0
 	la		$a2, str_instrucciones
 	jal		imprimir_texto
	li		$a0, 0x0100
 	la		$a2, str_letra
 	jal		imprimir_texto
	li		$a0, 0x0700
 	la		$a2, str_comenzar
 	jal		imprimir_texto
	
	loop_comenzar:
	jal keypad_read
	beq $v0, 65, fin_tateti
	bne $v0, 68, loop_comenzar
	
	comienzo_juego: 
	# reseteo todas las variables
	jal inicializar_tateti
	
	# XXX imprimir tablero page 2 col 40
	jal	black_screen
	li $a0, 0x0228
	li $a1, 0x3030
	la $a2, tablero_bitmap
	jal draw_bitmap
	

	loop_principal:
	
	lb $t0, jugador_actual
	beqz $t0, juega_circulo
	
	juega_cruz:
	li		$a0, 0x0
 	li		$a1, 0x0880
	la		$a2, str_linea_negra
 	jal		draw_bitmap
	
	li		$a0, 0x0
 	la		$a2, str_turno_X
 	jal		imprimir_texto

	j jugar
	
	juega_circulo:
	li		$a0, 0x0
 	li		$a1, 0x0880
	la		$a2, str_linea_negra
 	jal		draw_bitmap
	
	li		$a0, 0x0
 	la		$a2, str_turno_O
 	jal		imprimir_texto
	
	
	jugar:
	loop_esperar_jugada:
	jal keypad_read
	beq $v0, 65, fin_tateti
	beqz $v0, loop_esperar_jugada
	beq $v0, 66, loop_esperar_jugada
	beq $v0, 67, loop_esperar_jugada
	beq $v0, 68, verificar_si_hay_jugada
	beq $v0, 42, loop_esperar_jugada
	beq $v0, 35, loop_esperar_jugada
	beq $v0, 48, loop_esperar_jugada
	
	# Si llega hasta aca, toco una posicion del tablero
	# verifico si hay jugada
	lb $t0, hay_jugada
	beqz $t0, primera_jugada
	
	move $s2, $v0
	addi $s1, $s1, 49
	beq $s2, $s1, es_igual
	# ingreso nueva jugada
	addi $s1, $s1, -49
	# imprimir cuadrado negro 
	move $a0, $s1
	addi $a0, $a0, 1
	jal obtener_direccion
	move $a0, $v0 # a0 tiene la direccion de page y columna a imprimir el bitmap
	li $a1, 0x1010
	la $a2, cuadrado_negro
	jal draw_bitmap
	move $s1, $s2
	addi $s1, $s1, -49
	j verificar_jugada

	primera_jugada:
	
	move $s1, $v0
	addi $s1, $s1, -49
	
	verificar_jugada:
	jal actualizar_tablero
	li $t0, 0x100 # posicion
	srl $t0, $t0, $s1
	
	lh $t2, tablero_general
	and $t2, $t2, $t0
	beqz $t2, disponible 
	
	no_disponible:
	li		$a0, 0x0
 	li		$a1, 0x0880
	la		$a2, str_linea_negra
 	jal		draw_bitmap
	
	li		$a0, 0x0
 	la		$a2, str_no_disponible
 	jal		imprimir_texto
	
	sb $0, hay_jugada
	
	j loop_esperar_jugada
	
	disponible:
	li $t1, 1
	sb $t1, hay_jugada
	
	move $a0, $s1
	addi $a0, $a0, 1
	jal obtener_direccion
	move $a0, $v0 # a0 tiene la direccion de page y columna a imprimir el bitmap
	
	lb $t3, jugador_actual
	beqz $t3, jugada_de_circulo
	
	jugada_de_cruz:
	li $a1, 0x1010
	la $a2, x_invertido_bitmap
	jal draw_bitmap
	j loop_esperar_jugada

	jugada_de_circulo:
	li $a1, 0x1010
	la $a2, o_invertido_bitmap
	jal draw_bitmap
	j loop_esperar_jugada

	
	confirmar_jugada:
	sb $0,hay_jugada
	li $t0, 0x100 # posicion
	srl $t0, $t0, $s1
	lb $t3, jugador_actual
	move $a0, $s1
	addi $a0, $a0, 1
	jal obtener_direccion
	move $a0, $v0 # a0 tiene la direccion de page y columna a imprimir el bitmap
	beqz $t3, confirmar_jugada_de_circulo
	
	confirmar_jugada_de_cruz:
	li $a1, 0x1010
	la $a2, x_bitmap
	jal draw_bitmap
	
	lh $t1, tablero_x
	li $t0, 0x100 
	srl $t0, $t0, $s1
	or $t1,$t1,$t0
	sh $t1, tablero_x
	j verificar_ganador
	
	confirmar_jugada_de_circulo:
	li $a1, 0x1010
	la $a2, o_bitmap
	jal draw_bitmap
	
	lh $t1, tablero_o
	li $t0, 0x100 
	srl $t0, $t0, $s1
	or $t1,$t1,$t0
	sh $t1, tablero_o
	
	verificar_ganador:
	# en $t1 tengo tablero del jugador actual
	
	# check horizontal
	li $t2, 0x1C0
	
	loop_horizontal:
	
	and $t3, $t2, $t1
	beq $t3, $t2, gano
	srl $t2, $t2, 3
	bnez $t2, loop_horizontal
	
	li $t2, 0x124
	
	loop_vertical:
	
	and $t3, $t2, $t1
	beq $t3, $t2, gano
	srl $t2, $t2, 1
	bne $t2, 0x24, loop_vertical
	
	# check diagonal
	li $t2, 0x111
	and $t3, $t2, $t1
	beq $t2, $t3, gano
	
	li $t2, 0x54
	and $t3, $t2, $t1
	beq $t2, $t3, gano
	
	jal actualizar_tablero
	lh $t0, tablero_general
	beq $t0, 0x1FF, nadie_gana
	
	j cambio_jugador
	
	es_igual:
	addi $s1,$s1,-49
	j loop_esperar_jugada
	
    
	# Recibe en a0 el lugar a imprimir, devuelve en $v0 la page y columna a imprimir el bitmap
    obtener_direccion:
    beq $a0, 1, uno
    beq $a0, 2, dos
    beq $a0, 3, tres
    beq $a0, 4, cuatro
    beq $a0, 5, cinco
    beq $a0, 6, seis
    beq $a0, 7, siete
    beq $a0, 8, ocho
    beq $a0, 9, nueve
    
    
    uno:
    li $v0, 0x0228
    j volver
    
    dos:
    li $v0, 0x0238
    j volver
    
    tres:
    li $v0, 0x0248
    j volver
    
    cuatro:
    li $v0, 0x0428
    j volver
    
    cinco:
    li $v0, 0x0438
    j volver
    
    seis:
    li $v0, 0x0448
    j volver
    
    siete:
    li $v0, 0x0628
    j volver
    
    ocho:
    li $v0, 0x0638
    j volver
    
    nueve:
    li $v0, 0x0648
    j volver
    
    volver:
    jr $ra
    
	
actualizar_tablero:
    lh $t0, tablero_x
    lh $t1, tablero_o
    or $t0, $t0, $t1
    andi $t0, $t0, 0x1FF # me quedo con los 9 bits menos significativos
    sh $t0, tablero_general
    
    jr $ra

nadie_gana:	
	jal black_screen
	li		$a0, 0x0600
 	la		$a2, str_volver_a_jugar
 	jal		imprimir_texto
	
	li		$a0, 0x0300
 	la		$a2, str_nadie_gano
 	jal		imprimir_texto
	
	j loop_volver_a_jugar
	
gano:
	jal black_screen
	li		$a0, 0x0600
 	la		$a2, str_volver_a_jugar
 	jal		imprimir_texto
	
	lb $t0, jugador_actual
	beqz $t0, gano_circulo
	
	gano_x:
	li		$a0, 0x0300
 	la		$a2, str_gano_X
 	jal		imprimir_texto
	j loop_volver_a_jugar
	
	gano_circulo:
	li		$a0, 0x0300
 	la		$a2, str_gano_O
 	jal		imprimir_texto


	loop_volver_a_jugar:
	jal keypad_read
	beq $v0, 65, fin_tateti
	beq $v0, 68, comienzo_juego
	j loop_volver_a_jugar
	
	
	
cambio_jugador:
	# 0 es circulo
	# 0xFF es cruz
	lb $t0, jugador_actual
	not $t0,$t0
	sb $t0, jugador_actual
j loop_principal

	
verificar_si_hay_jugada:
	lb $t0, hay_jugada
	beqz $t0, loop_esperar_jugada
	j confirmar_jugada
	
inicializar_tateti:
	sb $0, jugador_actual
	sh $0, tablero_x
	sh $0, tablero_o
	sh $0, tablero_general
	sb $0, hay_jugada
jr $ra
	
fin_tateti:
	
	lw $ra, ($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	
	addi $sp, $sp,12
	
	jr $ra